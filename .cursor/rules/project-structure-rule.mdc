---
description: 프로젝트 구조 규칙
globs: 
---
## 프로젝트 구조: 주요 폴더 구조 예시

**프로젝트 구조는 다음과 같이 설정하세요. `src` 폴더는 사용하지 않습니다.**

```
your-nextjs-project/
│
├── app/                     # App Router 라우트 폴더
│   ├── api/                 # API 엔드포인트 관련 폴더
│   ├── dashboard/           # 개별 페이지 폴더 (재사용되지 않는 컴포넌트 포함)
│   │   ├── page.tsx         # dashboard 페이지
│   │   └── DashboardStats.tsx  # 페이지 전용 컴포넌트
│   └── profile/             # profile 페이지 관련 폴더
│       ├── page.tsx         # profile 페이지
│       └── ProfileCard.tsx  # 페이지 전용 컴포넌트
│
├── components/              # 공통 컴포넌트 모음
│   ├── ui                   # ShadCN을 통한 공통 UI 컴포넌트
│   │   ├── button.tsx
│   │   ├── input.tsx
│   │   ├── select.tsx
│   ├── layout/              # 레이아웃 관련 공통 컴포넌트
│   │   ├── header.tsx
│   │   ├── footer.tsx
│   │   ├── sidebar.tsx
│   ├── OptionsDropdown.tsx  # 재사용 가능한 공통 컴포넌트
│   ├── PromptInput.tsx      # 특정 기능에 필요한 공통 컴포넌트
│   └── GeneratedImagePreview.tsx
│
├── db/                      # 데이터베이스 관련 폴더
│   ├── schema.ts            # DrizzleORM 스키마 정의 파일
│   └── index.ts             # 데이터베이스 연결 초기화 파일 (initialize the connection)
│
├── drizzle/                 # DrizzleORM 관련 설정 파일
│
├── public/                  # 정적 파일 (이미지, 폰트 등)
│   └── favicon.ico
│
├── styles/                  # 글로벌 스타일 (CSS, SCSS, Tailwind 등)
│   └── globals.css
│
├── types/                   # 공통 인터페이스 및 타입 정의
│   └── index.ts             # 여러 파일에서 사용할 공통 타입 및 인터페이스 정의 파일
│
├── utils/                   # 유틸리티 함수 모음
│   └── fetcher.ts           # API 호출 등 유틸리티 함수
│
├── middleware.ts            # 미들웨어 설정 파일
├── .env                     # 환경 변수 설정 파일
├── drizzle.config.ts        # DrizzleORM 설정 파일
├── .eslintrc.js             # ESLint 설정 파일
├── .gitignore               # Git 무시할 파일 설정
├── next.config.js           # Next.js 설정 파일
├── package.json             # 프로젝트 패키지 정보
├── tsconfig.json            # TypeScript 설정 파일
└── README.md                # 프로젝트 설명 문서
```