---
description: Type/Interface management best practice for Typescript
globs: 
alwaysApply: false
---
## TypeScript + Zod 타입 관리 Best Practice

**도메인/기능별로 스키마 파일 분리**
- 각 도메인(예: user, product, order 등)별로 Zod 스키마와 타입을 별도 파일(`user.schema.ts`, `product.schema.ts` 등)에 정의합니다.
- 모든 스키마를 한 파일에 몰아넣지 않고, 관련 로직과 함께 관리하여 유지보수성과 확장성을 높입니다.

**공통 스키마/유틸리티 분리**
- 여러 도메인에서 재사용하는 필드(예: id, email, date 등)는 별도의 `common.schema.ts`에 정의하고, 필요할 때 import하여 사용합니다.

**타입 추론은 항상 z.infer 사용**
- Zod 스키마에서 타입을 추론할 때는 `z.infer<typeof ...>`를 사용해 타입을 자동 생성하고 export합니다.
- 타입과 유효성 검증 로직을 한 곳에서 관리해 중복 선언을 방지합니다.

**스키마 조합 및 확장 적극 활용**
- 비슷한 구조의 스키마는 `.extend()`나 `.merge()` 등 Zod의 스키마 조합 기능을 활용해 중복을 최소화합니다.

**폴더/파일 구조 예시**

```
schemas/
  user.schema.ts
  product.schema.ts
  order.schema.ts
  common.schema.ts
types/
  (필요시 별도 타입 정의)
```

**불필요한 스키마 import 지양**
- 각 서비스/페이지/컴포넌트에서는 필요한 스키마만 import하여 사용합니다.

**테스트 및 문서화 용이성 고려**
- 각 스키마 파일에 예시 데이터와 간단한 설명 주석을 추가해 테스트와 문서화가 쉽도록 합니다.